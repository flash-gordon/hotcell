#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require 'puffer_markup/lexer'
module PufferMarkup
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 136)
  NEWLINE_PRED = Set.new(Lexer::BOPEN.values + Lexer::OPERATIONS.values)
  NEWLINE_NEXT = Set.new(Lexer::BCLOSE.values + [:NEWLINE])

  TAG_MODES = { '{{' => :normal, '{{!' => :silence, '{{/' => :block_close }

  def initialize string
    @lexer = Lexer.new(string)
    @tokens = @lexer.tokens
    @position = -1
  end

  def parse
    if @tokens.size == 0
      Document.build :DOCUMENT
    else
      do_parse
    end
  end

  def next_token
    @position = @position + 1
    if tcurr && (tcurr[0] == :COMMENT || tcurr[0] == :NEWLINE && (
      (tpred && NEWLINE_PRED.include?(tpred[0])) ||
      (tnext && NEWLINE_NEXT.include?(tnext[0]))
    ))
      next_token
    else
      tcurr || [false, false]
    end
  end

  def tcurr
    @tokens[@position]
  end

  def tnext
    @tokens[@position.next]
  end

  def tpred
    @tokens[@position.pred]
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    33,    70,    16,   100,    70,    60,    60,   101,    15,    14,
    37,    38,    33,    67,    16,    61,    61,    98,    96,    61,
    15,    14,    99,     4,     5,    97,     6,    17,   104,    18,
   101,    26,    27,    28,    29,    30,    31,    32,    34,    17,
   100,    18,   102,    26,    27,    28,    29,    30,    31,    32,
    34,    33,   103,    16,     4,     5,    88,    55,    56,    15,
    14,    42,    35,    33,   100,    16,    55,    56,    55,    56,
    42,    15,    14,    11,    12,    55,    56,     9,    17,    42,
    18,   nil,    26,    27,    28,    29,    30,    31,    32,    34,
    89,   nil,    18,    94,    26,    27,    28,    29,    30,    31,
    32,    34,    33,   nil,    16,    55,    56,    55,    56,    42,
    15,    14,   nil,   nil,    33,   nil,    16,   nil,   nil,   nil,
    55,    56,    15,    14,    42,   nil,    41,    43,    46,    17,
   nil,    18,   nil,    26,    27,    28,    29,    30,    31,    32,
    34,    17,   nil,    18,   nil,    26,    27,    28,    29,    30,
    31,    32,    34,    33,   nil,    16,    37,    38,   nil,   nil,
    36,    15,    14,   nil,   nil,    33,   nil,    16,   nil,   nil,
   nil,    55,    56,    15,    14,    42,   nil,    41,    43,    46,
    17,   nil,    18,   nil,    26,    27,    28,    29,    30,    31,
    32,    34,    17,   nil,    18,   nil,    26,    27,    28,    29,
    30,    31,    32,    34,    33,   nil,    16,    55,    56,   nil,
   nil,    42,    15,    14,   nil,   nil,    33,   nil,    16,   nil,
   nil,   nil,   nil,   nil,    15,    14,   nil,   nil,   nil,   nil,
   nil,    17,   nil,    18,   nil,    26,    27,    28,    29,    30,
    31,    32,    34,    17,   nil,    18,   nil,    26,    27,    28,
    29,    30,    31,    32,    34,    33,   nil,    16,   nil,   nil,
   nil,   nil,   nil,    15,    14,   nil,   nil,    33,   nil,    16,
   nil,   nil,   nil,   nil,   nil,    15,    14,   nil,   nil,   nil,
   nil,   nil,    17,   nil,    18,   nil,    26,    27,    28,    29,
    30,    31,    32,    34,    89,   nil,    18,   nil,    26,    27,
    28,    29,    30,    31,    32,    34,    33,   nil,    16,   nil,
   nil,   nil,   nil,   nil,    15,    14,   nil,   nil,    33,   nil,
    16,   nil,   nil,   nil,   nil,   nil,    15,    14,    11,    12,
   nil,   nil,   nil,    17,   nil,    18,    63,    26,    27,    28,
    29,    30,    31,    32,    34,    17,    65,    18,   nil,    26,
    27,    28,    29,    30,    31,    32,    34,    33,   nil,    16,
   nil,   nil,   nil,   nil,   nil,    15,    14,   nil,   nil,    33,
   nil,    16,   nil,   nil,   nil,   nil,   nil,    15,    14,   nil,
   nil,   nil,   nil,   nil,    89,   nil,    18,   nil,    26,    27,
    28,    29,    30,    31,    32,    34,    17,   nil,    18,   nil,
    26,    27,    28,    29,    30,    31,    32,    34,    33,   nil,
    16,   nil,   nil,   nil,   nil,   nil,    15,    14,   nil,   nil,
    33,   nil,    16,   nil,   nil,   nil,   nil,   nil,    15,    14,
   nil,   nil,   nil,   nil,   nil,    17,   nil,    18,   nil,    26,
    27,    28,    29,    30,    31,    32,    34,    17,   nil,    18,
   nil,    26,    27,    28,    29,    30,    31,    32,    34,    33,
   nil,    16,   nil,   nil,   nil,   nil,   nil,    15,    14,   nil,
   nil,    33,   nil,    16,   nil,   nil,   nil,   nil,   nil,    15,
    14,   nil,   nil,   nil,   nil,   nil,    17,   nil,    18,   nil,
    26,    27,    28,    29,    30,    31,    32,    34,    17,   nil,
    18,   nil,    26,    27,    28,    29,    30,    31,    32,    34,
    33,   nil,    16,   nil,   nil,   nil,   nil,   nil,    15,    14,
   nil,   nil,    33,   nil,    16,   nil,   nil,   nil,   nil,   nil,
    15,    14,   nil,   nil,   nil,   nil,   nil,    17,   nil,    18,
   nil,    26,    27,    28,    29,    30,    31,    32,    34,    17,
   nil,    18,   nil,    26,    27,    28,    29,    30,    31,    32,
    34,    33,   nil,    16,   nil,   nil,   nil,   nil,   nil,    15,
    14,   nil,   nil,    33,   nil,    16,   nil,   nil,   nil,   nil,
   nil,    15,    14,   nil,   nil,   nil,   nil,   nil,    17,   nil,
    18,   nil,    26,    27,    28,    29,    30,    31,    32,    34,
    17,   nil,    18,   nil,    26,    27,    28,    29,    30,    31,
    32,    34,    33,   nil,    16,   nil,   nil,   nil,   nil,   nil,
    15,    14,   nil,   nil,    33,   nil,    16,   nil,   nil,   nil,
   nil,   nil,    15,    14,   nil,   nil,   nil,   nil,   nil,    17,
   nil,    18,   nil,    26,    27,    28,    29,    30,    31,    32,
    34,    17,   nil,    18,   nil,    26,    27,    28,    29,    30,
    31,    32,    34,    33,   nil,    16,   nil,   nil,   nil,   nil,
   nil,    15,    14,   nil,   nil,    33,   nil,    16,   nil,   nil,
   nil,   nil,   nil,    15,    14,   nil,   nil,   nil,   nil,   nil,
    17,   nil,    18,   nil,    26,    27,    28,    29,    30,    31,
    32,    34,    17,   nil,    18,   nil,    26,    27,    28,    29,
    30,    31,    32,    34,    33,   nil,    16,   nil,   nil,   nil,
   nil,   nil,    15,    14,   nil,   nil,    33,   nil,    16,   nil,
   nil,   nil,   nil,   nil,    15,    14,   nil,   nil,   nil,   nil,
   nil,    17,   nil,    18,   nil,    26,    27,    28,    29,    30,
    31,    32,    34,    17,   nil,    18,   nil,    26,    27,    28,
    29,    30,    31,    32,    34,    55,    56,   nil,   nil,    42,
   nil,    41,    43,    46,    44,    45,    49,    50,    51,    52,
    53,    54,    47,    48,    55,    56,   nil,   nil,    42,   nil,
    41,    43,    46,    44,    45,    49,    50,    51,    52,    53,
    54,    47,    48,    55,    56,   nil,   nil,    42,   nil,    41,
    43,    46,    44,    45,    49,    50,    51,    52,    53,    54,
    47,    48,    55,    56,   nil,   nil,    42,   nil,    41,    43,
    46,    44,    45,    49,    50,    51,    52,    53,    54,    47,
    48,    55,    56,   nil,   nil,    42,   nil,    41,    43,    46,
    44,    45,    49,    50,    51,    52,    53,    54,    47,    48,
    55,    56,   nil,   nil,    42,   nil,    41,    43,    46,    44,
    45,    49,    50,    51,    52,    53,    54,    47,    55,    56,
   nil,   nil,    42,   nil,    41,    43,    46,    44,    45,    49,
    50,    51,    52,   -68,   -68,    55,    56,   nil,   nil,    42,
   nil,    41,    43,    46,    44,    45,    49,    50,    51,    52,
    53,    54,    55,    56,   nil,   nil,    42,   nil,    41,    43,
    46,    44,    45,    49,    50,    51,    52,   -68,   -68,    55,
    56,   nil,   nil,    42,   nil,    41,    43,    46,    44,    45,
    55,    56,   nil,   nil,    42,   nil,    41,    43,    46,    44,
    45,    55,    56,   nil,   nil,    42,   nil,    41,    43,    46,
    44,    45,    55,    56,   nil,   nil,    42,   nil,    41,    43,
    46,    44,    45 ]

racc_action_check = [
    53,    34,    53,    68,   100,    89,    17,    89,    53,    53,
    62,    62,    98,    34,    98,    89,    17,    66,    62,    88,
    98,    98,    68,     0,     0,    66,     1,    53,    95,    53,
    70,    53,    53,    53,    53,    53,    53,    53,    53,    98,
    92,    98,    90,    98,    98,    98,    98,    98,    98,    98,
    98,     5,    91,     5,     1,     1,    55,    57,    57,     5,
     5,    57,     6,    61,   108,    61,    78,    78,    59,    59,
    78,    61,    61,     5,     5,    75,    75,     5,     5,    75,
     5,   nil,     5,     5,     5,     5,     5,     5,     5,     5,
    61,   nil,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    60,   nil,    60,    74,    74,    58,    58,    74,
    60,    60,   nil,   nil,    11,   nil,    11,   nil,   nil,   nil,
    76,    76,    11,    11,    76,   nil,    76,    76,    76,    60,
   nil,    60,   nil,    60,    60,    60,    60,    60,    60,    60,
    60,    11,   nil,    11,   nil,    11,    11,    11,    11,    11,
    11,    11,    11,    12,   nil,    12,    10,    10,   nil,   nil,
    10,    12,    12,   nil,   nil,   101,   nil,   101,   nil,   nil,
   nil,    77,    77,   101,   101,    77,   nil,    77,    77,    77,
    12,   nil,    12,   nil,    12,    12,    12,    12,    12,    12,
    12,    12,   101,   nil,   101,   nil,   101,   101,   101,   101,
   101,   101,   101,   101,    14,   nil,    14,    73,    73,   nil,
   nil,    73,    14,    14,   nil,   nil,    15,   nil,    15,   nil,
   nil,   nil,   nil,   nil,    15,    15,   nil,   nil,   nil,   nil,
   nil,    14,   nil,    14,   nil,    14,    14,    14,    14,    14,
    14,    14,    14,    15,   nil,    15,   nil,    15,    15,    15,
    15,    15,    15,    15,    15,    16,   nil,    16,   nil,   nil,
   nil,   nil,   nil,    16,    16,   nil,   nil,   103,   nil,   103,
   nil,   nil,   nil,   nil,   nil,   103,   103,   nil,   nil,   nil,
   nil,   nil,    16,   nil,    16,   nil,    16,    16,    16,    16,
    16,    16,    16,    16,   103,   nil,   103,   nil,   103,   103,
   103,   103,   103,   103,   103,   103,    18,   nil,    18,   nil,
   nil,   nil,   nil,   nil,    18,    18,   nil,   nil,    33,   nil,
    33,   nil,   nil,   nil,   nil,   nil,    33,    33,    18,    18,
   nil,   nil,   nil,    18,   nil,    18,    18,    18,    18,    18,
    18,    18,    18,    18,    18,    33,    33,    33,   nil,    33,
    33,    33,    33,    33,    33,    33,    33,    56,   nil,    56,
   nil,   nil,   nil,   nil,   nil,    56,    56,   nil,   nil,    37,
   nil,    37,   nil,   nil,   nil,   nil,   nil,    37,    37,   nil,
   nil,   nil,   nil,   nil,    56,   nil,    56,   nil,    56,    56,
    56,    56,    56,    56,    56,    56,    37,   nil,    37,   nil,
    37,    37,    37,    37,    37,    37,    37,    37,    38,   nil,
    38,   nil,   nil,   nil,   nil,   nil,    38,    38,   nil,   nil,
    41,   nil,    41,   nil,   nil,   nil,   nil,   nil,    41,    41,
   nil,   nil,   nil,   nil,   nil,    38,   nil,    38,   nil,    38,
    38,    38,    38,    38,    38,    38,    38,    41,   nil,    41,
   nil,    41,    41,    41,    41,    41,    41,    41,    41,    42,
   nil,    42,   nil,   nil,   nil,   nil,   nil,    42,    42,   nil,
   nil,    43,   nil,    43,   nil,   nil,   nil,   nil,   nil,    43,
    43,   nil,   nil,   nil,   nil,   nil,    42,   nil,    42,   nil,
    42,    42,    42,    42,    42,    42,    42,    42,    43,   nil,
    43,   nil,    43,    43,    43,    43,    43,    43,    43,    43,
    44,   nil,    44,   nil,   nil,   nil,   nil,   nil,    44,    44,
   nil,   nil,    54,   nil,    54,   nil,   nil,   nil,   nil,   nil,
    54,    54,   nil,   nil,   nil,   nil,   nil,    44,   nil,    44,
   nil,    44,    44,    44,    44,    44,    44,    44,    44,    54,
   nil,    54,   nil,    54,    54,    54,    54,    54,    54,    54,
    54,    46,   nil,    46,   nil,   nil,   nil,   nil,   nil,    46,
    46,   nil,   nil,    47,   nil,    47,   nil,   nil,   nil,   nil,
   nil,    47,    47,   nil,   nil,   nil,   nil,   nil,    46,   nil,
    46,   nil,    46,    46,    46,    46,    46,    46,    46,    46,
    47,   nil,    47,   nil,    47,    47,    47,    47,    47,    47,
    47,    47,    48,   nil,    48,   nil,   nil,   nil,   nil,   nil,
    48,    48,   nil,   nil,    49,   nil,    49,   nil,   nil,   nil,
   nil,   nil,    49,    49,   nil,   nil,   nil,   nil,   nil,    48,
   nil,    48,   nil,    48,    48,    48,    48,    48,    48,    48,
    48,    49,   nil,    49,   nil,    49,    49,    49,    49,    49,
    49,    49,    49,    50,   nil,    50,   nil,   nil,   nil,   nil,
   nil,    50,    50,   nil,   nil,    51,   nil,    51,   nil,   nil,
   nil,   nil,   nil,    51,    51,   nil,   nil,   nil,   nil,   nil,
    50,   nil,    50,   nil,    50,    50,    50,    50,    50,    50,
    50,    50,    51,   nil,    51,   nil,    51,    51,    51,    51,
    51,    51,    51,    51,    52,   nil,    52,   nil,   nil,   nil,
   nil,   nil,    52,    52,   nil,   nil,    45,   nil,    45,   nil,
   nil,   nil,   nil,   nil,    45,    45,   nil,   nil,   nil,   nil,
   nil,    52,   nil,    52,   nil,    52,    52,    52,    52,    52,
    52,    52,    52,    45,   nil,    45,   nil,    45,    45,    45,
    45,    45,    45,    45,    45,    64,    64,   nil,   nil,    64,
   nil,    64,    64,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,    64,   105,   105,   nil,   nil,   105,   nil,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   107,   107,   nil,   nil,   107,   nil,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,    13,    13,   nil,   nil,    13,   nil,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    93,    93,   nil,   nil,    93,   nil,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
    80,    80,   nil,   nil,    80,   nil,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    85,    85,
   nil,   nil,    85,   nil,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    79,    79,   nil,   nil,    79,
   nil,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    86,    86,   nil,   nil,    86,   nil,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    82,
    82,   nil,   nil,    82,   nil,    82,    82,    82,    82,    82,
    84,    84,   nil,   nil,    84,   nil,    84,    84,    84,    84,
    84,    83,    83,   nil,   nil,    83,   nil,    83,    83,    83,
    83,    83,    81,    81,   nil,   nil,    81,   nil,    81,    81,
    81,    81,    81 ]

racc_action_pointer = [
    -5,    26,   nil,   nil,   nil,    47,    62,   nil,   nil,   nil,
   130,   110,   149,   819,   200,   212,   251,   -17,   302,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   314,   -30,   nil,   nil,   365,   404,   nil,
   nil,   416,   455,   467,   506,   722,   557,   569,   608,   620,
   659,   671,   710,    -4,   518,    25,   353,    54,   104,    65,
    98,    59,   -16,   nil,   762,   nil,    -7,   nil,   -21,   nil,
     5,   nil,   nil,   204,   102,    72,   117,   168,    63,   892,
   857,   959,   926,   948,   937,   875,   909,   nil,   -14,   -18,
    10,    28,    16,   838,   nil,    -6,   nil,   nil,     8,   nil,
   -27,   161,   nil,   263,   nil,   781,   nil,   800,    40 ]

racc_action_default = [
   -68,   -68,    -3,    -4,    -5,   -68,   -68,    -1,    -2,    -6,
   -68,   -11,   -15,   -16,   -68,   -68,   -68,   -65,   -68,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -68,   -68,   109,    -7,    -9,   -13,   -10,
   -14,   -68,   -68,   -68,   -68,   -68,   -68,   -68,   -68,   -68,
   -68,   -68,   -68,   -68,   -68,   -68,   -68,   -23,   -24,   -33,
   -68,   -68,   -68,   -37,   -56,   -53,   -68,   -57,   -68,   -60,
   -68,    -8,   -12,   -17,   -18,   -19,   -20,   -21,   -22,   -25,
   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -35,   -65,   -65,
   -68,   -63,   -64,   -34,   -66,   -68,   -38,   -54,   -68,   -58,
   -68,   -68,   -36,   -68,   -67,   -55,   -59,   -61,   -62 ]

racc_goto_table = [
    57,    58,    59,    68,    90,     3,     8,     2,     7,    95,
    87,    10,    66,     1,   106,   nil,   nil,    39,    40,    64,
   nil,   nil,   nil,   nil,    62,   nil,   nil,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,   nil,    64,    71,    72,   nil,    93,    64,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   108,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   105,   nil,   nil,   107,   nil,   105 ]

racc_goto_check = [
     5,     5,     5,    15,     7,     3,     3,     2,     2,     7,
     6,     4,    14,     1,    16,   nil,   nil,     4,     4,     5,
   nil,   nil,   nil,   nil,     4,   nil,   nil,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,   nil,     5,     4,     4,   nil,     5,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,   nil,   nil,     5,   nil,     5 ]

racc_goto_pointer = [
   nil,    13,     7,     5,     6,   -14,   -45,   -52,   nil,   nil,
   nil,   nil,   nil,   nil,   -21,   -31,   -86 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    13,    25,   nil,    19,    20,
    21,    22,    23,    24,    91,    92,    69 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 45, :_reduce_1,
  2, 45, :_reduce_2,
  1, 45, :_reduce_3,
  1, 45, :_reduce_4,
  1, 46, :_reduce_5,
  2, 47, :_reduce_6,
  3, 47, :_reduce_7,
  3, 48, :_reduce_8,
  2, 48, :_reduce_none,
  2, 48, :_reduce_10,
  1, 48, :_reduce_11,
  3, 48, :_reduce_12,
  2, 48, :_reduce_none,
  2, 48, :_reduce_14,
  1, 48, :_reduce_15,
  1, 48, :_reduce_16,
  3, 49, :_reduce_17,
  3, 49, :_reduce_18,
  3, 49, :_reduce_19,
  3, 49, :_reduce_20,
  3, 49, :_reduce_21,
  3, 49, :_reduce_22,
  2, 49, :_reduce_23,
  2, 49, :_reduce_24,
  3, 49, :_reduce_25,
  3, 49, :_reduce_26,
  3, 49, :_reduce_27,
  3, 49, :_reduce_28,
  3, 49, :_reduce_29,
  3, 49, :_reduce_30,
  3, 49, :_reduce_31,
  3, 49, :_reduce_32,
  2, 49, :_reduce_33,
  3, 49, :_reduce_34,
  3, 49, :_reduce_35,
  4, 49, :_reduce_36,
  2, 49, :_reduce_37,
  3, 49, :_reduce_38,
  1, 49, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  2, 56, :_reduce_53,
  3, 56, :_reduce_54,
  3, 58, :_reduce_55,
  1, 58, :_reduce_56,
  2, 57, :_reduce_57,
  3, 57, :_reduce_58,
  3, 59, :_reduce_59,
  1, 59, :_reduce_60,
  3, 60, :_reduce_61,
  3, 51, :_reduce_62,
  1, 51, :_reduce_none,
  1, 51, :_reduce_64,
  1, 50, :_reduce_65,
  3, 50, :_reduce_66,
  4, 50, :_reduce_67 ]

racc_reduce_n = 68

racc_shift_n = 109

racc_token_table = {
  false => 0,
  :error => 1,
  :NEGATIVE => 2,
  :PERIOD => 3,
  :AOPEN => 4,
  :UPLUS => 5,
  :NOT => 6,
  :POWER => 7,
  :UMINUS => 8,
  :MULTIPLY => 9,
  :DIVIDE => 10,
  :MODULO => 11,
  :PLUS => 12,
  :MINUS => 13,
  :GT => 14,
  :GTE => 15,
  :LT => 16,
  :LTE => 17,
  :EQUAL => 18,
  :INEQUAL => 19,
  :AND => 20,
  :OR => 21,
  :TERNARY => 22,
  :ASSIGN => 23,
  :COMMA => 24,
  :COLON => 25,
  :SEMICOLON => 26,
  :NEWLINE => 27,
  :TEMPLATE => 28,
  :TOPEN => 29,
  :TCLOSE => 30,
  :IDENTIFER => 31,
  :ACLOSE => 32,
  :POPEN => 33,
  :PCLOSE => 34,
  :NIL => 35,
  :TRUE => 36,
  :FALSE => 37,
  :INTEGER => 38,
  :FLOAT => 39,
  :STRING => 40,
  :REGEXP => 41,
  :HOPEN => 42,
  :HCLOSE => 43 }

racc_nt_base = 44

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEGATIVE",
  "PERIOD",
  "AOPEN",
  "UPLUS",
  "NOT",
  "POWER",
  "UMINUS",
  "MULTIPLY",
  "DIVIDE",
  "MODULO",
  "PLUS",
  "MINUS",
  "GT",
  "GTE",
  "LT",
  "LTE",
  "EQUAL",
  "INEQUAL",
  "AND",
  "OR",
  "TERNARY",
  "ASSIGN",
  "COMMA",
  "COLON",
  "SEMICOLON",
  "NEWLINE",
  "TEMPLATE",
  "TOPEN",
  "TCLOSE",
  "IDENTIFER",
  "ACLOSE",
  "POPEN",
  "PCLOSE",
  "NIL",
  "TRUE",
  "FALSE",
  "INTEGER",
  "FLOAT",
  "STRING",
  "REGEXP",
  "HOPEN",
  "HCLOSE",
  "$start",
  "document",
  "template",
  "tag",
  "sequence",
  "expr",
  "method",
  "arguments",
  "value",
  "const",
  "number",
  "string",
  "array",
  "hash",
  "params",
  "pairs",
  "pair" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_1(val, _values, result)
     val[0].children.push(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_2(val, _values, result)
     val[0].children.push(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_3(val, _values, result)
     result = Document.build :DOCUMENT, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_4(val, _values, result)
     result = Document.build :DOCUMENT, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_6(val, _values, result)
     result = Tagger.build :TAG, mode: TAG_MODES[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_7(val, _values, result)
     result = Tagger.build :TAG, *val[1].flatten, mode: TAG_MODES[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_10(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_11(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_12(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_15(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_17(val, _values, result)
     result = Calculator.build :MULTIPLY, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_18(val, _values, result)
     result = Calculator.build :POWER, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_19(val, _values, result)
     result = Calculator.build :DIVIDE, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_20(val, _values, result)
     result = Calculator.build :PLUS, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_21(val, _values, result)
     result = Calculator.build :MINUS, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_22(val, _values, result)
     result = Calculator.build :MODULO, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_23(val, _values, result)
     result = Calculator.build :UMINUS, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
     result = Calculator.build :UPLUS, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_25(val, _values, result)
     result = Calculator.build :AND, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_26(val, _values, result)
     result = Calculator.build :OR, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_27(val, _values, result)
     result = Calculator.build :GT, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_28(val, _values, result)
     result = Calculator.build :GTE, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_29(val, _values, result)
     result = Calculator.build :LT, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_30(val, _values, result)
     result = Calculator.build :LTE, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_31(val, _values, result)
     result = Calculator.build :EQUAL, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_32(val, _values, result)
     result = Calculator.build :INEQUAL, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_33(val, _values, result)
     result = Calculator.build :NOT, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_34(val, _values, result)
     result = Assigner.build :ASSIGN, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_35(val, _values, result)
     val[2].children[0] = val[0]; result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_36(val, _values, result)
     result = Summoner.build :METHOD, val[0], '[]', *val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_37(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_38(val, _values, result)
            result = case val[1].size
        when 0
          nil
        when 1
          val[1][0]
        else
          Sequencer.build :SEQUENCE, *val[1].flatten
        end
      
    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_53(val, _values, result)
     result = Arrayer.build :ARRAY 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_54(val, _values, result)
     result = Arrayer.build :ARRAY, *val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 116)
  def _reduce_55(val, _values, result)
     val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_56(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_57(val, _values, result)
     result = Hasher.build :HASH 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_58(val, _values, result)
     result = Hasher.build :HASH, *val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_59(val, _values, result)
     val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_60(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_61(val, _values, result)
     result = Arrayer.build :PAIR, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_62(val, _values, result)
     result = [*val[0], Hasher.build(:HASH, *val[2])] 
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_64(val, _values, result)
     result = Hasher.build(:HASH, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_65(val, _values, result)
     result = Summoner.build :METHOD, nil, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_66(val, _values, result)
     result = Summoner.build :METHOD, nil, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_67(val, _values, result)
     result = Summoner.build :METHOD, nil, val[0], *val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module PufferMarkup
