#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Hotcell
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 223)
  OPERATIONS = {
    '+' => :PLUS, '-' => :MINUS, '*' => :MULTIPLY, '**' => :POWER, '/' => :DIVIDE, '%' => :MODULO,

    '&&' => :AND, '||' => :OR, '!' => :NOT, '==' => :EQUAL, '!=' => :INEQUAL,
    '>' => :GT, '>=' => :GTE, '<' => :LT, '<=' => :LTE,

    '=' => :ASSIGN, ',' => :COMMA, '.' => :PERIOD, ':' => :COLON, '?' => :QUESTION,
    ';' => :SEMICOLON
  }

  BOPEN = { '[' => :AOPEN, '{' => :HOPEN, '(' => :POPEN }
  BCLOSE = { ']' => :ACLOSE, '}' => :HCLOSE, ')' => :PCLOSE }

  NEWLINE_PRED = Set.new(BOPEN.values + OPERATIONS.values)
  NEWLINE_NEXT = Set.new(BCLOSE.values + [:NEWLINE])

  TAG_MODES = {
    '!' => :silence, '^' => :escape, 'e' => :escape,
    '~' => :normal, 'r' => :normal
  }

  def initialize source, options = {}
    @source = Source.wrap(source)
    @lexer = Lexer.new(source)
    @tokens = @lexer.tokens
    @position = -1

    @commands = options[:commands] || {}
    @blocks = options[:blocks] || {}
    @endblocks = Set.new(@blocks.keys.map { |identifer| "end#{identifer}" })
    @escape_tags = !!options[:escape_tags]

    @substack = []
    @posstack = []
  end

  def build klass, *args
    options = args.extract_options!
    options[:source] = @source
    klass.build *args.push(options)
  end

  def pospoppush pop, push = 0
    # because fuck the brains, that's why!
    last = @posstack.pop
    reduced = @posstack.push(@posstack.pop(pop)[push])[-1]
    @posstack.push last
    reduced
  end

  def tag_modes tag, default = :normal
    mode = tag.gsub(/^{{/, '').first
    TAG_MODES[mode] || default
  end

  def parse
    children = @tokens.size.zero? ? [] : do_parse
    build Joiner, :JOINER, *children, position: 0
  end

  def next_token
    @position = @position + 1
    tcurr = @tokens[@position]

    if tcurr && (tcurr[0] == :COMMENT || tcurr[0] == :NEWLINE && (
      ((tpred = @tokens[@position.pred]) && NEWLINE_PRED.include?(tpred[0])) ||
      ((tnext = @tokens[@position.next]) && NEWLINE_NEXT.include?(tnext[0]))
    ))
      next_token
    else
      if tcurr
        @posstack << tcurr[1][1]
        tcurr = [tcurr[0], tcurr[1][0]]
      end

      if tcurr && tcurr[0] == :IDENTIFER
        if @commands.key?(tcurr[1])
          [:COMMAND, tcurr[1]]
        elsif @blocks.key?(tcurr[1])
          @substack.push(@blocks[tcurr[1]].subcommands)
          [:BLOCK, tcurr[1]]
        elsif @substack.last && @substack.last.key?(tcurr[1])
          [:SUBCOMMAND, tcurr[1]]
        elsif @endblocks.include?(tcurr[1])
          @substack.pop
          [:ENDBLOCK, tcurr[1]]
        elsif tcurr[1] == 'end'
          @substack.pop
          [:END, tcurr[1]]
        else
          tcurr
        end
      else
        tcurr || [false, false]
      end
    end
  end

  def on_error(token, value, vstack)
    raise Hotcell::UnexpectedLexem.new("#{token_to_str(token) || '?'} `#{value}`",
      *@source.info(@posstack.last).values_at(:line, :column))
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    46,    10,    26,    63,   116,   113,   157,   102,    25,    24,
    55,    56,   102,   113,   152,   114,   151,    46,    64,    26,
    64,    85,    86,    21,    22,    25,    24,   100,    64,    69,
     7,     8,   148,   150,   159,    27,    92,    38,    39,    40,
    41,    42,    43,    44,    45,   114,    59,   137,    47,    64,
   147,   158,    27,   116,    38,    39,    40,    41,    42,    43,
    44,    45,    46,   146,    26,    47,   115,    55,    56,    67,
    25,    24,    85,    86,    95,    65,    72,    94,    97,    46,
   140,    26,    85,    86,    53,    21,    22,    25,    24,    12,
    14,    16,   142,    18,   116,   141,    97,    27,   nil,    38,
    39,    40,    41,    42,    43,    44,    45,   nil,    69,   nil,
    47,    85,    86,   nil,    27,    72,    38,    39,    40,    41,
    42,    43,    44,    45,    46,   nil,    26,    47,     7,    48,
    55,    56,    25,    24,    54,    85,    86,    85,    86,    72,
    46,    72,    26,    71,    73,    76,    74,    75,    25,    24,
    85,    86,   nil,    69,    72,   nil,    71,    73,    76,    27,
   nil,    38,    39,    40,    41,    42,    43,    44,    45,    59,
    85,    86,    47,   nil,    72,    27,   nil,    38,    39,    40,
    41,    42,    43,    44,    45,    46,   nil,    26,    47,     7,
     8,    85,    86,    25,    24,    72,     7,    48,    85,    86,
   nil,    46,    72,    26,    71,    73,    76,    74,    75,    25,
    24,    85,    86,   nil,    59,    72,   nil,    71,    73,    76,
    27,   nil,    38,    39,    40,    41,    42,    43,    44,    45,
    69,   nil,   nil,    47,   nil,   nil,    27,   nil,    38,    39,
    40,    41,    42,    43,    44,    45,    46,   nil,    26,    47,
   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,    85,
    86,   nil,    46,    72,    26,    71,    73,    76,    74,    75,
    25,    24,   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,
   nil,    27,   nil,    38,    39,    40,    41,    42,    43,    44,
    45,    59,   nil,   nil,    47,   nil,   nil,    27,   nil,    38,
    39,    40,    41,    42,    43,    44,    45,    46,   nil,    26,
    47,   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,
    85,    86,   nil,    46,    72,    26,    71,    73,    76,    74,
    75,    25,    24,   nil,   nil,   nil,    69,   nil,   nil,   nil,
   nil,   nil,    27,   nil,    38,    39,    40,    41,    42,    43,
    44,    45,    69,   nil,   nil,    47,   nil,   nil,    27,   nil,
    38,    39,    40,    41,    42,    43,    44,    45,    46,   nil,
    26,    47,   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,    26,   nil,   nil,   nil,
   nil,   nil,    25,    24,   nil,   nil,   nil,    69,   nil,   nil,
   nil,   nil,   nil,    27,   nil,    38,    39,    40,    41,    42,
    43,    44,    45,    69,   nil,   nil,    47,   nil,   nil,    27,
   nil,    38,    39,    40,    41,    42,    43,    44,    45,    46,
   nil,    26,    47,   nil,   nil,   nil,   nil,    25,    24,   nil,
   nil,   nil,   nil,   nil,   nil,    46,   nil,    26,   nil,   nil,
   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,    69,   nil,
   nil,   nil,   nil,   nil,    27,   nil,    38,    39,    40,    41,
    42,    43,    44,    45,    69,   nil,   nil,    47,   nil,   nil,
    27,   nil,    38,    39,    40,    41,    42,    43,    44,    45,
    46,   nil,    26,    47,   nil,   nil,   nil,   nil,    25,    24,
   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,    26,   nil,
   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,    69,
   nil,   nil,   nil,   nil,   nil,    27,   nil,    38,    39,    40,
    41,    42,    43,    44,    45,    59,   nil,   nil,    47,   nil,
   nil,    27,   nil,    38,    39,    40,    41,    42,    43,    44,
    45,    46,   nil,    26,    47,   nil,   nil,   nil,   nil,    25,
    24,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,
    69,   nil,   nil,   nil,   nil,   nil,    27,   nil,    38,    39,
    40,    41,    42,    43,    44,    45,    69,   nil,   nil,    47,
   nil,    98,    27,   nil,    38,    39,    40,    41,    42,    43,
    44,    45,    46,   nil,    26,    47,   nil,   nil,   nil,   nil,
    25,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,    26,   nil,   nil,   nil,
   nil,    69,    25,    24,   nil,   nil,   nil,    27,   nil,    38,
    39,    40,    41,    42,    43,    44,    45,    21,    22,   nil,
    47,    12,    14,    16,   103,    18,   105,   106,   nil,    27,
   nil,    38,    39,    40,    41,    42,    43,    44,    45,    46,
   nil,    26,    47,   nil,   nil,   nil,   nil,    25,    24,   nil,
   nil,   nil,   nil,   nil,   nil,    46,   nil,    26,   nil,   nil,
   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,    69,   nil,
   nil,   nil,   nil,   nil,    27,   nil,    38,    39,    40,    41,
    42,    43,    44,    45,    69,   nil,   nil,    47,   nil,   nil,
    27,   nil,    38,    39,    40,    41,    42,    43,    44,    45,
    46,   nil,    26,    47,   nil,   nil,   nil,   nil,    25,    24,
   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,    26,   nil,
   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,    69,
   nil,   nil,   nil,   nil,   nil,    27,   nil,    38,    39,    40,
    41,    42,    43,    44,    45,    69,   nil,   nil,    47,   nil,
   nil,    27,   nil,    38,    39,    40,    41,    42,    43,    44,
    45,    46,   nil,    26,    47,   nil,   nil,   nil,   nil,    25,
    24,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,
    69,   nil,   nil,   nil,   nil,   nil,    27,   nil,    38,    39,
    40,    41,    42,    43,    44,    45,    69,   nil,   nil,    47,
   nil,   nil,    27,   nil,    38,    39,    40,    41,    42,    43,
    44,    45,    46,   nil,    26,    47,   nil,   nil,   nil,   nil,
    25,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,    26,   nil,   nil,   nil,   nil,   nil,    25,    24,
   nil,    69,   nil,   nil,   nil,   nil,   nil,    27,   nil,    38,
    39,    40,    41,    42,    43,    44,    45,   nil,    14,    69,
    47,    18,   nil,   nil,   nil,    27,   nil,    38,    39,    40,
    41,    42,    43,    44,    45,    46,   nil,    26,    47,   nil,
   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,   nil,   nil,
   nil,    46,   nil,    26,   nil,   nil,   nil,   nil,   nil,    25,
    24,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,
    27,   120,    38,    39,    40,    41,    42,    43,    44,    45,
    69,   nil,   nil,    47,   nil,   nil,    27,   nil,    38,    39,
    40,    41,    42,    43,    44,    45,    46,   nil,    26,    47,
   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,   nil,
   nil,   nil,    46,   nil,    26,   nil,   nil,   nil,   nil,   nil,
    25,    24,   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,
   nil,    27,   nil,    38,    39,    40,    41,    42,    43,    44,
    45,    69,   nil,   nil,    47,   nil,   nil,    27,   nil,    38,
    39,    40,    41,    42,    43,    44,    45,    46,   nil,    26,
    47,   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,   nil,
   nil,   nil,   nil,    46,   nil,    26,   nil,   nil,   nil,   nil,
   nil,    25,    24,   nil,   nil,   nil,    69,   nil,   nil,   nil,
   nil,   nil,    27,   nil,    38,    39,    40,    41,    42,    43,
    44,    45,    69,   nil,   nil,    47,   nil,   nil,    27,   nil,
    38,    39,    40,    41,    42,    43,    44,    45,    46,   nil,
    26,    47,   nil,   nil,    85,    86,    25,    24,    72,   nil,
    71,    73,    76,    74,    75,    79,    80,    81,    82,  -105,
  -105,    21,    22,   nil,   nil,   nil,   nil,    69,   nil,   nil,
   nil,   nil,   nil,    27,   nil,    38,    39,    40,    41,    42,
    43,    44,    45,    85,    86,   145,    47,    72,   nil,    71,
    73,    76,    74,    75,    79,    80,    81,    82,    83,    84,
    77,    78,    87,    85,    86,   nil,   nil,    72,   nil,    71,
    73,    76,    74,    75,    79,    80,    81,    82,    83,    84,
    77,    78,    87,    85,    86,   nil,   nil,    72,   nil,    71,
    73,    76,    74,    75,    79,    80,    81,    82,    83,    84,
    77,    78,    87,    85,    86,   nil,   nil,    72,   nil,    71,
    73,    76,    74,    75,    79,    80,    81,    82,    83,    84,
    77,    78,  -105,    85,    86,   nil,   nil,    72,   nil,    71,
    73,    76,    74,    75,    79,    80,    81,    82,    83,    84,
    77,    78,    87,    85,    86,   nil,   nil,    72,   nil,    71,
    73,    76,    74,    75,    79,    80,    81,    82,    83,    84,
    77,    78,    87,    85,    86,   nil,   nil,    72,   nil,    71,
    73,    76,    74,    75,    79,    80,    81,    82,    83,    84,
    77,    85,    86,   nil,   nil,    72,   nil,    71,    73,    76,
    74,    75,    79,    80,    81,    82,    83,    84,    85,    86,
   nil,   nil,    72,   nil,    71,    73,    76,    74,    75,    79,
    80,    81,    82,  -105,  -105 ]

racc_action_check = [
    27,     1,    27,    16,   101,    69,   121,    47,    27,    27,
   144,   144,   116,    59,   107,    59,   106,   103,    16,   103,
    69,    90,    90,    27,    27,   103,   103,    47,    59,    27,
     1,     1,   101,   104,   144,    27,    27,    27,    27,    27,
    27,    27,    27,    27,    27,   102,   103,    85,    27,   137,
    99,   138,   103,    61,   103,   103,   103,   103,   103,   103,
   103,   103,     8,    99,     8,   103,    60,    91,    91,    20,
     8,     8,    88,    88,    45,    17,    88,    45,    45,   113,
    91,   113,    89,    89,    10,     8,     8,   113,   113,     8,
     8,     8,    93,     8,   155,    93,    93,     8,   nil,     8,
     8,     8,     8,     8,     8,     8,     8,   nil,   113,   nil,
     8,   124,   124,   nil,   113,   124,   113,   113,   113,   113,
   113,   113,   113,   113,    87,   nil,    87,   113,     9,     9,
    13,    13,    87,    87,    13,   123,   123,   132,   132,   123,
    86,   132,    86,   132,   132,   132,   132,   132,    86,    86,
   126,   126,   nil,    87,   126,   nil,   126,   126,   126,    87,
   nil,    87,    87,    87,    87,    87,    87,    87,    87,    86,
   122,   122,    87,   nil,   122,    86,   nil,    86,    86,    86,
    86,    86,    86,    86,    86,    14,   nil,    14,    86,     0,
     0,   127,   127,    14,    14,   127,    49,    49,   130,   130,
   nil,    84,   130,    84,   130,   130,   130,   130,   130,    84,
    84,   125,   125,   nil,    14,   125,   nil,   125,   125,   125,
    14,   nil,    14,    14,    14,    14,    14,    14,    14,    14,
    84,   nil,   nil,    14,   nil,   nil,    84,   nil,    84,    84,
    84,    84,    84,    84,    84,    84,    83,   nil,    83,    84,
   nil,   nil,   nil,   nil,    83,    83,   nil,   nil,   nil,   133,
   133,   nil,    18,   133,    18,   133,   133,   133,   133,   133,
    18,    18,   nil,   nil,   nil,    83,   nil,   nil,   nil,   nil,
   nil,    83,   nil,    83,    83,    83,    83,    83,    83,    83,
    83,    18,   nil,   nil,    83,   nil,   nil,    18,   nil,    18,
    18,    18,    18,    18,    18,    18,    18,   147,   nil,   147,
    18,   nil,   nil,   nil,   nil,   147,   147,   nil,   nil,   nil,
   131,   131,   nil,    21,   131,    21,   131,   131,   131,   131,
   131,    21,    21,   nil,   nil,   nil,   147,   nil,   nil,   nil,
   nil,   nil,   147,   nil,   147,   147,   147,   147,   147,   147,
   147,   147,    21,   nil,   nil,   147,   nil,   nil,    21,   nil,
    21,    21,    21,    21,    21,    21,    21,    21,    22,   nil,
    22,    21,   nil,   nil,   nil,   nil,    22,    22,   nil,   nil,
   nil,   nil,   nil,   nil,    82,   nil,    82,   nil,   nil,   nil,
   nil,   nil,    82,    82,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,    22,   nil,    22,    22,    22,    22,    22,
    22,    22,    22,    82,   nil,   nil,    22,   nil,   nil,    82,
   nil,    82,    82,    82,    82,    82,    82,    82,    82,    24,
   nil,    24,    82,   nil,   nil,   nil,   nil,    24,    24,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,    25,   nil,   nil,
   nil,   nil,   nil,    25,    25,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,    24,   nil,    24,    24,    24,    24,
    24,    24,    24,    24,    25,   nil,   nil,    24,   nil,   nil,
    25,   nil,    25,    25,    25,    25,    25,    25,    25,    25,
    26,   nil,    26,    25,   nil,   nil,   nil,   nil,    26,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   115,   nil,   115,   nil,
   nil,   nil,   nil,   nil,   115,   115,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    26,   nil,    26,    26,    26,
    26,    26,    26,    26,    26,   115,   nil,   nil,    26,   nil,
   nil,   115,   nil,   115,   115,   115,   115,   115,   115,   115,
   115,   114,   nil,   114,   115,   nil,   nil,   nil,   nil,   114,
   114,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,    46,
   nil,   nil,   nil,   nil,   nil,    46,    46,   nil,   nil,   nil,
   114,   nil,   nil,   nil,   nil,   nil,   114,   nil,   114,   114,
   114,   114,   114,   114,   114,   114,    46,   nil,   nil,   114,
   nil,    46,    46,   nil,    46,    46,    46,    46,    46,    46,
    46,    46,    81,   nil,    81,    46,   nil,   nil,   nil,   nil,
    81,    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,   nil,    48,   nil,   nil,   nil,
   nil,    81,    48,    48,   nil,   nil,   nil,    81,   nil,    81,
    81,    81,    81,    81,    81,    81,    81,    48,    48,   nil,
    81,    48,    48,    48,    48,    48,    48,    48,   nil,    48,
   nil,    48,    48,    48,    48,    48,    48,    48,    48,    80,
   nil,    80,    48,   nil,   nil,   nil,   nil,    80,    80,   nil,
   nil,   nil,   nil,   nil,   nil,    55,   nil,    55,   nil,   nil,
   nil,   nil,   nil,    55,    55,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,    80,   nil,    80,    80,    80,    80,
    80,    80,    80,    80,    55,   nil,   nil,    80,   nil,   nil,
    55,   nil,    55,    55,    55,    55,    55,    55,    55,    55,
    56,   nil,    56,    55,   nil,   nil,   nil,   nil,    56,    56,
   nil,   nil,   nil,   nil,   nil,   nil,    79,   nil,    79,   nil,
   nil,   nil,   nil,   nil,    79,    79,   nil,   nil,   nil,    56,
   nil,   nil,   nil,   nil,   nil,    56,   nil,    56,    56,    56,
    56,    56,    56,    56,    56,    79,   nil,   nil,    56,   nil,
   nil,    79,   nil,    79,    79,    79,    79,    79,    79,    79,
    79,    78,   nil,    78,    79,   nil,   nil,   nil,   nil,    78,
    78,   nil,   nil,   nil,   nil,   nil,   nil,    75,   nil,    75,
   nil,   nil,   nil,   nil,   nil,    75,    75,   nil,   nil,   nil,
    78,   nil,   nil,   nil,   nil,   nil,    78,   nil,    78,    78,
    78,    78,    78,    78,    78,    78,    75,   nil,   nil,    78,
   nil,   nil,    75,   nil,    75,    75,    75,    75,    75,    75,
    75,    75,    77,   nil,    77,    75,   nil,   nil,   nil,   nil,
    77,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    63,   nil,    63,   nil,   nil,   nil,   nil,   nil,    63,    63,
   nil,    77,   nil,   nil,   nil,   nil,   nil,    77,   nil,    77,
    77,    77,    77,    77,    77,    77,    77,   nil,    63,    63,
    77,    63,   nil,   nil,   nil,    63,   nil,    63,    63,    63,
    63,    63,    63,    63,    63,    64,   nil,    64,    63,   nil,
   nil,   nil,   nil,    64,    64,   nil,   nil,   nil,   nil,   nil,
   nil,    76,   nil,    76,   nil,   nil,   nil,   nil,   nil,    76,
    76,   nil,   nil,   nil,    64,   nil,   nil,   nil,   nil,   nil,
    64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
    76,   nil,   nil,    64,   nil,   nil,    76,   nil,    76,    76,
    76,    76,    76,    76,    76,    76,    71,   nil,    71,    76,
   nil,   nil,   nil,   nil,    71,    71,   nil,   nil,   nil,   nil,
   nil,   nil,    72,   nil,    72,   nil,   nil,   nil,   nil,   nil,
    72,    72,   nil,   nil,   nil,    71,   nil,   nil,   nil,   nil,
   nil,    71,   nil,    71,    71,    71,    71,    71,    71,    71,
    71,    72,   nil,   nil,    71,   nil,   nil,    72,   nil,    72,
    72,    72,    72,    72,    72,    72,    72,    73,   nil,    73,
    72,   nil,   nil,   nil,   nil,    73,    73,   nil,   nil,   nil,
   nil,   nil,   nil,    74,   nil,    74,   nil,   nil,   nil,   nil,
   nil,    74,    74,   nil,   nil,   nil,    73,   nil,   nil,   nil,
   nil,   nil,    73,   nil,    73,    73,    73,    73,    73,    73,
    73,    73,    74,   nil,   nil,    73,   nil,   nil,    74,   nil,
    74,    74,    74,    74,    74,    74,    74,    74,    97,   nil,
    97,    74,   nil,   nil,   135,   135,    97,    97,   135,   nil,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,    97,    97,   nil,   nil,   nil,   nil,    97,   nil,   nil,
   nil,   nil,   nil,    97,   nil,    97,    97,    97,    97,    97,
    97,    97,    97,    23,    23,    97,    97,    23,   nil,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    58,    58,   nil,   nil,    58,   nil,    58,
    58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
    58,    58,    58,   154,   154,   nil,   nil,   154,   nil,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   139,   139,   nil,   nil,   139,   nil,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   119,   119,   nil,   nil,   119,   nil,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   153,   153,   nil,   nil,   153,   nil,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   129,   129,   nil,   nil,   129,   nil,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   128,   128,   nil,   nil,   128,   nil,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   134,   134,
   nil,   nil,   134,   nil,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134 ]

racc_action_pointer = [
   160,     1,   nil,   nil,   nil,   nil,   nil,   nil,    58,    99,
    84,   nil,   nil,   103,   181,   nil,   -21,    44,   258,   nil,
    38,   319,   364,  1150,   425,   441,   486,    -4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   563,   -26,   630,   167,
   nil,   nil,   nil,   nil,   nil,   691,   736,   nil,  1170,   -11,
    41,    28,   nil,   876,   921,   nil,   nil,   nil,   nil,   -19,
   nil,   982,   998,  1043,  1059,   813,   937,   858,   797,   752,
   675,   608,   380,   242,   197,    14,   136,   120,    69,    79,
    18,    40,   nil,    46,   nil,   nil,   nil,  1104,   nil,    25,
   nil,   -21,    19,    13,     2,   nil,   -19,   -17,   nil,   nil,
   nil,   nil,   nil,    75,   547,   502,   -21,   nil,   nil,  1230,
   nil,   -34,   167,   132,   108,   208,   147,   188,  1288,  1270,
   195,   317,   134,   256,  1305,  1111,   nil,    10,    13,  1210,
   nil,   nil,   nil,   nil,   -17,   nil,   nil,   303,   nil,   nil,
   nil,   nil,   nil,  1250,  1190,    69,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -105,  -105,    -2,    -3,    -4,    -5,    -6,    -7,  -105,  -105,
  -105,    -1,    -8,  -105,   -10,   -12,  -102,  -105,   -18,   -20,
  -105,   -36,   -40,   -41,  -105,  -105,  -105,  -105,   -64,   -65,
   -66,   -67,   -68,   -69,   -70,   -71,   -72,   -73,   -74,   -75,
   -76,   -77,   -78,   -79,   -80,  -105,  -105,  -105,  -105,  -105,
   -29,   -30,   -31,   160,    -9,   -34,   -38,   -11,   -93,  -102,
  -100,  -101,   -97,  -105,  -105,   -14,   -19,   -25,   -35,  -102,
   -39,  -105,  -105,  -105,  -105,  -105,  -105,  -105,  -105,  -105,
  -105,  -105,  -105,  -105,  -105,  -105,  -105,  -105,   -48,   -49,
   -58,  -105,   -62,  -105,   -82,   -83,   -84,  -105,   -90,  -105,
   -94,  -105,  -105,   -15,  -105,   -22,   -24,  -105,   -27,   -28,
   -32,   -33,   -37,  -105,  -105,  -105,  -105,   -13,   -21,   -59,
  -103,  -105,   -42,   -43,   -44,   -45,   -46,   -47,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -60,  -102,  -105,   -89,
   -63,   -81,   -85,   -86,  -105,   -88,   -91,  -105,   -95,   -16,
   -17,   -23,   -26,   -98,   -92,   -99,   -96,  -104,   -61,   -87 ]

racc_goto_table = [
    58,     1,    57,   101,    58,    96,    66,    68,    70,   107,
    88,    89,    90,    91,    51,    52,    49,   118,   136,    93,
   104,    99,   117,   156,   nil,   nil,     2,    11,   nil,   nil,
   nil,   nil,    58,   nil,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   111,   112,   nil,   nil,   nil,   nil,   nil,   nil,   119,
    58,   nil,   121,   143,   109,   110,   nil,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   155,    58,   139,   138,   108,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   144,   nil,   nil,   nil,   nil,   nil,    58,
   nil,   149,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   119,
   153,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   154 ]

racc_goto_check = [
    19,     1,     9,    33,    19,    31,     9,     7,     7,    15,
    19,    19,    19,     7,    12,    17,    18,    13,    20,    30,
    11,    32,     8,    34,   nil,   nil,     2,     2,   nil,   nil,
   nil,   nil,    19,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,     7,     7,   nil,   nil,   nil,   nil,   nil,   nil,    19,
    19,   nil,     9,    31,    12,    17,   nil,    19,    19,    19,
    19,    19,    19,    19,    19,    19,    19,    19,    19,    19,
    19,    33,    19,    19,     9,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,    19,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
    19,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19 ]

racc_goto_pointer = [
   nil,     1,    26,   nil,   nil,   nil,   nil,   -14,   -41,   -12,
   nil,   -28,     5,   -46,   nil,   -39,   nil,     6,     7,   -14,
   -67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -26,   -40,   -25,   -44,   -93 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,    13,    15,   nil,
    17,   nil,   nil,    19,    20,   nil,     9,   nil,   nil,    23,
    37,    28,    29,    30,    31,    32,    33,    34,    35,    36,
   nil,   nil,    60,    61,    62 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 55, :_reduce_1,
  1, 55, :_reduce_2,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 57, :_reduce_7,
  2, 58, :_reduce_8,
  3, 58, :_reduce_9,
  1, 62, :_reduce_10,
  2, 62, :_reduce_11,
  1, 64, :_reduce_none,
  3, 64, :_reduce_13,
  3, 60, :_reduce_14,
  1, 65, :_reduce_15,
  2, 65, :_reduce_16,
  3, 66, :_reduce_17,
  1, 67, :_reduce_18,
  2, 67, :_reduce_19,
  1, 68, :_reduce_none,
  3, 68, :_reduce_21,
  1, 69, :_reduce_none,
  2, 69, :_reduce_23,
  1, 69, :_reduce_none,
  3, 70, :_reduce_25,
  3, 71, :_reduce_26,
  2, 72, :_reduce_27,
  2, 72, :_reduce_28,
  1, 72, :_reduce_29,
  1, 72, :_reduce_30,
  2, 59, :_reduce_31,
  3, 59, :_reduce_32,
  3, 61, :_reduce_33,
  2, 61, :_reduce_34,
  2, 61, :_reduce_35,
  1, 61, :_reduce_36,
  3, 61, :_reduce_37,
  2, 61, :_reduce_38,
  2, 61, :_reduce_39,
  1, 61, :_reduce_40,
  1, 61, :_reduce_41,
  3, 73, :_reduce_42,
  3, 73, :_reduce_43,
  3, 73, :_reduce_44,
  3, 73, :_reduce_45,
  3, 73, :_reduce_46,
  3, 73, :_reduce_47,
  2, 73, :_reduce_48,
  2, 73, :_reduce_49,
  3, 73, :_reduce_50,
  3, 73, :_reduce_51,
  3, 73, :_reduce_52,
  3, 73, :_reduce_53,
  3, 73, :_reduce_54,
  3, 73, :_reduce_55,
  3, 73, :_reduce_56,
  3, 73, :_reduce_57,
  2, 73, :_reduce_58,
  3, 73, :_reduce_59,
  3, 73, :_reduce_60,
  4, 73, :_reduce_61,
  2, 73, :_reduce_62,
  3, 73, :_reduce_63,
  1, 73, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 78, :_reduce_none,
  1, 80, :_reduce_none,
  3, 79, :_reduce_81,
  2, 79, :_reduce_82,
  1, 84, :_reduce_83,
  1, 84, :_reduce_84,
  2, 84, :_reduce_85,
  2, 84, :_reduce_86,
  3, 85, :_reduce_87,
  2, 85, :_reduce_88,
  3, 81, :_reduce_89,
  2, 82, :_reduce_90,
  3, 82, :_reduce_91,
  3, 86, :_reduce_92,
  1, 86, :_reduce_93,
  2, 83, :_reduce_94,
  3, 83, :_reduce_95,
  3, 87, :_reduce_96,
  1, 87, :_reduce_97,
  3, 88, :_reduce_98,
  3, 63, :_reduce_99,
  1, 63, :_reduce_none,
  1, 63, :_reduce_101,
  1, 74, :_reduce_102,
  3, 74, :_reduce_103,
  4, 74, :_reduce_104 ]

racc_reduce_n = 105

racc_shift_n = 160

racc_token_table = {
  false => 0,
  :error => 1,
  :NEGATIVE => 2,
  :PERIOD => 3,
  :AOPEN => 4,
  :UPLUS => 5,
  :NOT => 6,
  :POWER => 7,
  :UMINUS => 8,
  :MULTIPLY => 9,
  :DIVIDE => 10,
  :MODULO => 11,
  :PLUS => 12,
  :MINUS => 13,
  :GT => 14,
  :GTE => 15,
  :LT => 16,
  :LTE => 17,
  :EQUAL => 18,
  :INEQUAL => 19,
  :AND => 20,
  :OR => 21,
  :RANGE => 22,
  :TERNARY => 23,
  :ASSIGN => 24,
  :COMMA => 25,
  :COLON => 26,
  :SEMICOLON => 27,
  :NEWLINE => 28,
  :TEMPLATE => 29,
  :TOPEN => 30,
  :TCLOSE => 31,
  :COMMAND => 32,
  :IDENTIFER => 33,
  :SUBCOMMAND => 34,
  :BLOCK => 35,
  :ENDBLOCK => 36,
  :END => 37,
  :ACLOSE => 38,
  :POPEN => 39,
  :PCLOSE => 40,
  :NIL => 41,
  :TRUE => 42,
  :FALSE => 43,
  :INTEGER => 44,
  :FLOAT => 45,
  :STRING => 46,
  :REGEXP => 47,
  :DOPEN => 48,
  :DCLOSE => 49,
  :IOPEN => 50,
  :ICLOSE => 51,
  :HOPEN => 52,
  :HCLOSE => 53 }

racc_nt_base = 54

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEGATIVE",
  "PERIOD",
  "AOPEN",
  "UPLUS",
  "NOT",
  "POWER",
  "UMINUS",
  "MULTIPLY",
  "DIVIDE",
  "MODULO",
  "PLUS",
  "MINUS",
  "GT",
  "GTE",
  "LT",
  "LTE",
  "EQUAL",
  "INEQUAL",
  "AND",
  "OR",
  "RANGE",
  "TERNARY",
  "ASSIGN",
  "COMMA",
  "COLON",
  "SEMICOLON",
  "NEWLINE",
  "TEMPLATE",
  "TOPEN",
  "TCLOSE",
  "COMMAND",
  "IDENTIFER",
  "SUBCOMMAND",
  "BLOCK",
  "ENDBLOCK",
  "END",
  "ACLOSE",
  "POPEN",
  "PCLOSE",
  "NIL",
  "TRUE",
  "FALSE",
  "INTEGER",
  "FLOAT",
  "STRING",
  "REGEXP",
  "DOPEN",
  "DCLOSE",
  "IOPEN",
  "ICLOSE",
  "HOPEN",
  "HCLOSE",
  "$start",
  "document",
  "document_unit",
  "template",
  "tag",
  "block_tag",
  "command_tag",
  "sequence",
  "command_body",
  "arguments",
  "command",
  "subcommand",
  "subcommand_tag",
  "block_body",
  "block_open",
  "block_close",
  "block_open_tag",
  "block_close_tag",
  "block_subnodes",
  "expr",
  "method",
  "value",
  "const",
  "number",
  "string",
  "dstring",
  "regexp",
  "range",
  "array",
  "hash",
  "dstring_content",
  "dstring_interpolation",
  "params",
  "pairs",
  "pair" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_1(val, _values, result)
     pospoppush(2); val[0].push(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_8(val, _values, result)
             result = build Tag, :TAG,
           mode: tag_modes(val[0], @escape_tags ? :escape : :normal),
           position: pospoppush(2)
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_9(val, _values, result)
             result = build Tag, :TAG,
           *Array.wrap(val[1]).flatten,
           mode: tag_modes(val[0], @escape_tags ? :escape : :normal),
           position: pospoppush(3)
       
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_10(val, _values, result)
     result = build @commands[val[0]] || Command, val[0], position: pospoppush(1) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_11(val, _values, result)
                      result = build @commands[val[0]] || Command, val[0], *val[1], position: pospoppush(2)
                
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_13(val, _values, result)
                 result = build Assigner, val[0], val[2], position: pospoppush(3)
           
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_14(val, _values, result)
                     command = val[1].is_a?(Command) ? val[1] : val[1].children[0]
                 command.validate!
                 result = build Tag, :TAG, val[1], mode: tag_modes(val[0]), position: pospoppush(3)
               
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_15(val, _values, result)
     result = build @substack.last[val[0]], val[0], position: pospoppush(1) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_16(val, _values, result)
                    result = build @substack.last[val[0]], val[0], *val[1], position: pospoppush(2)
              
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_17(val, _values, result)
     pospoppush(3); result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_18(val, _values, result)
     result = build @blocks[val[0]] || Block, val[0], position: pospoppush(1) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_19(val, _values, result)
                    result = build @blocks[val[0]] || Block, val[0], *val[1], position: pospoppush(2)
              
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_21(val, _values, result)
                    result = build Assigner, val[0], val[2], position: pospoppush(3)
              
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_23(val, _values, result)
     pospoppush(2) 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_25(val, _values, result)
                        result = build Tag, :TAG, val[1], mode: tag_modes(val[0]), position: pospoppush(3)
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_26(val, _values, result)
     pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_27(val, _values, result)
                        pospoppush(2)
                    val[0][-1].is_a?(Joiner) ?
                      val[0][-1].children.push(val[1]) :
                      val[0].push(build(Joiner, :JOINER, val[1]))
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_28(val, _values, result)
     pospoppush(2); val[0].push(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_29(val, _values, result)
     result = [build(Joiner, :JOINER, val[0], position: pospoppush(1))] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_31(val, _values, result)
                   pospoppush(2)
               block = val[0].children[0].is_a?(Block) ?
                 val[0].children[0] : val[0].children[0].children[0]
               block.validate!
             
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_32(val, _values, result)
                   pospoppush(3)
               block = val[0].children[0].is_a?(Block) ?
                 val[0].children[0] : val[0].children[0].children[0]
               block.options[:subnodes] = val[1]
               block.validate!
             
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_33(val, _values, result)
     pospoppush(2); result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_34(val, _values, result)
     pospoppush(2) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_35(val, _values, result)
     pospoppush(2, 1); result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_36(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_37(val, _values, result)
     pospoppush(2); result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_38(val, _values, result)
     pospoppush(2) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_39(val, _values, result)
     pospoppush(2, 1); result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_40(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 140)
  def _reduce_42(val, _values, result)
     result = build Expression, :MULTIPLY, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 141)
  def _reduce_43(val, _values, result)
     result = build Expression, :POWER, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 142)
  def _reduce_44(val, _values, result)
     result = build Expression, :DIVIDE, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 143)
  def _reduce_45(val, _values, result)
     result = build Expression, :PLUS, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_46(val, _values, result)
     result = build Expression, :MINUS, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_47(val, _values, result)
     result = build Expression, :MODULO, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_48(val, _values, result)
     result = build Expression, :UMINUS, val[1], position: pospoppush(2) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_49(val, _values, result)
     result = build Expression, :UPLUS, val[1], position: pospoppush(2) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_50(val, _values, result)
     result = build Expression, :AND, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_51(val, _values, result)
     result = build Expression, :OR, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_52(val, _values, result)
     result = build Expression, :GT, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_53(val, _values, result)
     result = build Expression, :GTE, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_54(val, _values, result)
     result = build Expression, :LT, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_55(val, _values, result)
     result = build Expression, :LTE, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_56(val, _values, result)
     result = build Expression, :EQUAL, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_57(val, _values, result)
     result = build Expression, :INEQUAL, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_58(val, _values, result)
     result = build Expression, :NOT, val[1], position: pospoppush(2) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_59(val, _values, result)
     result = build Assigner, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_60(val, _values, result)
     pospoppush(3); val[2].children[0] = val[0]; result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_61(val, _values, result)
              result = build Summoner, '[]', val[0], *val[2], position: pospoppush(4)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_62(val, _values, result)
     pospoppush(2); result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_63(val, _values, result)
              result = case val[1].size
          when 1
            val[1][0]
          else
            build Sequencer, :SEQUENCE, *val[1].flatten, position: pospoppush(3)
          end
        
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_81(val, _values, result)
     result = build Expression, :DSTRING, *val[1], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_82(val, _values, result)
     pospoppush(2); result = '' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_83(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_84(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_85(val, _values, result)
     pospoppush(2); val[0].push(val[1]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_86(val, _values, result)
     pospoppush(2); val[0].push(val[1]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_87(val, _values, result)
                               result = case val[1].size
                           when 1
                             val[1][0]
                           else
                             build Sequencer, :SEQUENCE, *val[1].flatten, position: pospoppush(3)
                           end
                         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_88(val, _values, result)
     pospoppush(2); result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_89(val, _values, result)
               result = build Expression, val[1] == '..' ? :RANGE : :ERANGE,
             val[0], val[2], position: pospoppush(3)
         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_90(val, _values, result)
     result = build Arrayer, :ARRAY, position: pospoppush(2) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_91(val, _values, result)
     result = build Arrayer, :ARRAY, *val[1], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_92(val, _values, result)
     pospoppush(3); val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_94(val, _values, result)
     result = build Hasher, :HASH, position: pospoppush(2) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_95(val, _values, result)
     result = build Hasher, :HASH, *val[1], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_96(val, _values, result)
     pospoppush(3); val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_98(val, _values, result)
     result = build Arrayer, :PAIR, val[0], val[2], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_99(val, _values, result)
     result = [*val[0], build(Hasher, :HASH, *val[2], position: pospoppush(3))] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_101(val, _values, result)
     result = build Hasher, :HASH, *val[0], position: pospoppush(1) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_102(val, _values, result)
     result = build Summoner, val[0], position: pospoppush(1) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_103(val, _values, result)
     result = build Summoner, val[0], position: pospoppush(3) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_104(val, _values, result)
                result = build Summoner, val[0], nil, *val[2], position: pospoppush(4)
          
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Hotcell
